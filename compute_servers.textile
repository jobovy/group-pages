---
layout: default
title: Compute servers in the department
---

Currently, there are two compute servers. This page gives some pointers on how to use them.

h2(#setup). Setup and SSH keys

You should have a @.bash_profile@ and @.bashrc@ file in your home directory for setting environment variables every time you log on (or similar for other shell types). If you need inspiration, you can look at @/home/bovy/.bash_profile@ and @/home/bovy/.bashrc@. To avoid backend issues with matplotlib, you should have a file @.matplotlib/matplotlibrc@ in your home directory that sets the backend to @Agg@. You can download a sample file "here":http://matplotlib.org/_static/matplotlibrc and change the @backend@ line to use @Agg@.

To log on and use some of the other functionality, you should set up an SSH key, such that you can log on without having to type in your password. On your home computer (for example, your laptop which you use to log onto the compute servers or your office computer) do

<pre>$ ssh-keygen -t rsa</pre>

to generate a key. Use a long passphrase that you will remember. On the compute server you should create a @.ssh@ directory in your home directory

<pre>
$ mkdir .ssh
$ chmod 700 .ssh
$ cd .ssh
</pre>

and create an @authorized_keys@ file

<pre>
$ touch authorized_keys
$ chmod 600 authorized_keys
</pre>

Log out and copy your public key to the compute server

<pre>
$ cat ~/.ssh/id_rsa.pub | ssh -l USERNAME SERVER.astro.utoronto.ca 'sh -c "cat - >> ~/.ssh/authorized_keys"'
</pre>

You will also want to use a @.ssh/config@ file on your home computer to make login in easier. This file has entries such as

<pre>
Host NICKNAME
     Hostname SERVER.astro.utoronto.ca
     User USERNAME
     ForwardAgent yes
</pre>

Then you can login simply as

<pre>
$ ssh NICKNAME
</pre>

On a Mac Keychain will remember your key's passphrase, so you won't have to type it constantly. On Linux there are similar programs.

h2(#install). Installing software

You should install any software locally, including packages such as @galpy@ and @apogee@. All of the users of this server might be using different (development) versions of this and other software, so it's easiest if everybody installs locally as much as is practical. Create a @local/@ directory in your home directory

<pre>
$ cd
$ mkdir local
</pre>

and then install software to that directory. Make sure to add your @local/bin@ directory to your path (@export PATH=$HOME/local/bin:$PATH@ in your @.bash_profile@).For compiled programs this means that you typically do

<pre>
$ ./configure --prefix=~/local
...
</pre>

Python packages can be installed as

<pre>
$ python setup.py install --prefix=~/local
</pre>

or with pip as

<pre>
$ pip install PACKAGE --install-option="--prefix=~/local"
</pre>

Python packages developed in the group (such as @galpy@ and @apogee@) should be installed in development mode with

<pre>
$ python setup.py develop --prefix=~/local
</pre>

To use Python packages installed locally, set (or add) to your @PYTHONPATH@ as follows

<pre>
$ export PYTHONPATH=~/local/lib/python2.7/site-packages
</pre>

or

<pre>
$ export PYTHONPATH=~/local/lib/python3.6/site-packages
</pre>

if you are using Python 3.6.

Installing @FERRE@ with the @apogee@ package locally doesn't work (the installer can't figure out to copy the necessary binaries to @$HOME/local/bin@), so to install this you need to run the installation with @--install-ferre@, let it fail, and then copy the @ferre@ and @ascii2bin@ binaries to @$HOME/local/bin@ yourself (and make them executable with @chmod u+x ~/local/bin/ferre@ and @chmod u+x ~/local/bin/ascii2bin@.

h2(#nemo). Running NEMO

"NEMO":http://admit.astro.umd.edu/nemo/ is installed on the server. To be able to use it, you can add the following line to your
@.bash_profile@ or @.bashrc@

<pre>
if [ -z "$NEMO" ]; then source ~bovy/Repos/nemo/nemo_start.sh; fi
</pre>

You can also install @NEMO@ locally yourself and then probably want to start from "this GitHub version":https://github.com/jobovy/nemo.

h2(#ipython). Running iPython/Jupyter notebooks/lab

You can run an iPython notebook on the server while manipulating and displaying it on your home computer using the following steps. First, login to the compute server and start a notebook server on some port PORT (PORT should be something like 8889, but choose something different to avoid overlap with other users)

<pre>
$ jupyter notebook --no-browser --port=PORT
</pre>

or for Jupyter lab

<pre>
$ jupyter lab --no-browser --port=PORT
</pre>

Check that you don't get an error message that the PORT is already in use

On your local, home computer open an SSH tunnel as follows

<pre>
$ ssh -N -L localhost:8888:localhost:PORT NICKNAME
</pre>

where @NICKNAME@ is the same ssh shortcut as above. If you have an IPython notebook running locally you need to use a different local port (not 8888, because that will be used by the local notebook). Then open a tab in your browser and navigate to

<pre>
localhost:8888
</pre>

which displays the notebook server that is running remotely. To close the SSH tunnel, just terminate the SSH tunnel running process. You can start the remote notebook in a UNIX "screen":https://kb.iu.edu/d/acuy session. This way you can log out while detaching the screen (thus keeping the process running remotely) and this also safeguards you against losing the connection to the remote server while you are working in the notebook. Note that computations in the notebook will only remain running when you are connected to the notebook using your browser (however, the kernel keeps running if you are disconnected, so when you reconnect, the notebook will still have all of the variables etc. that you defined). Therefore, do not use this to run long computations.

h2(#users). Adding users

Adding users is easily done by

<pre>
$ sudo adduser NEW_USERNAME
</pre>

which will ask for a new password which you can create using a service like "RANDOM.ORG":https://www.random.org/passwords. This password should be immediately changed by the new user. Make a scratch directory and change the ownership to the new user with

<pre>
$ sudo chown -R NEW_USERNAME NEW_USERNAME
</pre>

The above only creates the account on one server. To make the same account on all servers, add the new user using @useradd@ on each new after they setup their password (don't use @adduser@, just @useradd@). Then edit @/etc/passwd@ and @/etc/group@ such that it is the same, and copy the entry between the first colons in @/etc/shadow@ (note that you might have to make @/etc/shadow@ writeable first).

To allow a user to use @Docker@, add them to the @docker@ group

<pre>
$ sudo usermod -aG docker NEW_USERNAME
</pre>

To delete a user do

<pre>
$ sudo deluser --remove-home NEW_USERNAME
</pre>

on all servers. Also remove the scratch directory.
