---
layout: default
title: Accessing data on the compute servers
---

h2(#location). Where are the data located?

Large data sets are located in the 

@/data/@

directory. Typically, you should _not_ depend on this directly, but use an environment variable @DATADIR@ that is set to this directory and your code should use this environment variable to find the location of the top data directory. The same holds for the individual large data sets described below. All of these data might get moved around in the future, so by relying on environment variables your code will be resilient against such changes.

h3(#apogee). APOGEE data

The APOGEE data are located at @$DATADIR/sdss/apogee@ following the layout described "here":https://github.com/jobovy/apogee#data-files-and-environment-variables. To use this data, you should set an environment variable @SDSS_LOCAL_SAS_MIRROR@ to point to @$DATADIR/sdss/apogee@. This wil allow use of the "@apogee@":https://github.com/jobovy/apogee package, but will also be more generally useful.

h3(#gaia). Gaia data

The Gaia data are located at @$DATADIR/Gaia@ following the layout of the Gaia data archive. To use this data as part of the "@gaia_tools@":https://github.com/jobovy/gaia_tools package, you should set an environment variable @GAIA_TOOLS_DATA@ to point to @$DATADIR/data4code/gaia_tools@.

The DR1 Gaia data were downloaded with the following commands (note that the DR1 data were later moved to a sub-directory @gdr1@):

<pre>curl -O http://cdn.gea.esac.esa.int/Gaia/tgas_source/fits/TgasSource_000-000-0[00-15].fits
curl -O http://cdn.gea.esac.esa.int/Gaia/gaia_source/fits/GaiaSource_000-0[00-19]-[000-255].fits
curl -O http://cdn.gea.esac.esa.int/Gaia/gaia_source/fits/GaiaSource_000-020-[000-110].fits</pre>

The DR2 Gaia data were downloaded using

<pre>wget -r -nH -nc --cut-dirs=2 --no-parent --reject="index.html*",vot.gz http://cdn.gea.esac.esa.int/Gaia/gdr2/</pre>

although rejecting the @index.html@ files seems not to have worked! The DR2 data are also loaded into the @catalogs@ database as described below.

h3(#2mass). 2MASS, Gaia DR2, and other catalogs

2MASS data are located at @$DATADIR/2mass@ and have been directly downloaded from the "@2MASS archive@":http://www.ipac.caltech.edu/2mass/overview/access.html. The data have been loaded into a "PostgreSQL":https://www.postgresql.org/ database @catalogs@ that is running on the server (as is usual, this database is owned by the user @postgres@). The point-sources table is @twomass_psc@; the schema for this table is "here":http://irsa.ipac.caltech.edu/2MASS/download/allsky/format_psc.html. You can use it for example as 
<pre>> psql catalogs <notextile>-</notextile>U postgres
catalogs=# select count(<notextile>*</notextile>) as rows FROM twomass_psc;
   rows    
-----------
 470992970
(1 row)
       </pre>
In Python, you can access this database using, e.g., the "@psycopg2@":http://initd.org/psycopg/docs/ module
<pre>>>> import psycopg2
>>> conn= psycopg2.connect("dbname=catalogs user=postgres")
>>> cur= conn.cursor()
>>> cur.execute("select count(*) as rows FROM twomass_psc;")
>>> print(cur.fetchall())
[(470992970L,)]
>>> cur.close()
>>> conn.close()
</pre>
A slightly more complicated computes the number counts in 0.1 mag bins in J:
<pre>>>> cur.execute("select floor(j_m*10), count(<notextile>*</notextile>) as count from twomass_psc group by floor(j_m*10);")
>>> a= numpy.array(cur.fetchall(),dtype='float').T
>>> sindx= numpy.argsort(a<notextile>[0]</notextile>)
>>> semilogy(a[0,sindx]/10.,a[1,sindx])</pre>
Note that these queries each take about five minutes to execute. The 2MASS point-source catalog comes with a table @twomass_psc_hp12@ that has the HEALPix index at level 12 in nested format for (RA,Dec). The HEALPix index is contained in @hp12index@ and can be joined with @twomass_psc@ on @pts_key@. For example, to get all stars in pixel 100 at level 10, you can run in Python

<pre>cur.execute("select ra,decl from twomass_psc, twomass_psc_hp12 where twomass_psc.pts_key = twomass_psc_hp12.pts_key and floor(hp12index/16) = 100;")</pre>

making use of the fact that pixel numbers at lower levels are simple divisions by a factor of four for each lower level.

The Gaia DR2 data have similarly been loaded into the @catalogs@ database as table @gdr2_gaia_source@. The load command was
<pre>> psql <notextile>-</notextile>f gaia_source_schema catalogs
> find gaia_source/csv/ -name GaiaSource_*.csv.gz | xargs zcat | sed -e '/^solution_id/d' | psql -c "copy gdr2_gaia_source from stdin with delimiter ',' NULL as ''" catalogs</pre>

using the schema in the @$DATADIR/Gaia/gdr2@ directory. The database was then configured for rapid access to random subsets of the data by doing
<pre>> psql catalogs <notextile>-</notextile>U postgres
catalogs=# create index random_index_idx on gdr2_gaia_source (random_index);
catalogs=# set maintenance_work_mem= '32GB';
catalogs=# cluster verbose gdr2_gaia_source using random_index_idx;</pre>

The @gaia_source_with_rv@ data was loaded into a similar table @gdr2_gaia_source_with_rv@.

h2(#download). Downloading data

If you require a large data set, it should be downloaded and kept under the @DATADIR@ directory. Only users that are part of the @datagrp@ group are allowed to write to @DATADIR@. Users are added to this group using

<pre>usermod -g datagrp USER</pre>

